{
    "sourceFile": "src/pages/auth/sign-in.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748447568818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748449473501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,12 @@\n       }\n      // console.log(\"result.data.data.token\",result.data.data.token)\n       // Connexion réussie - même logique que mobile\n        await auth.logIn(result.data.data.token);\n+\n+         if(result.data.data?.admin?.role===\"Admin\"){\n+         navigate(\"/dashboard/home\");\n+      }\n       if(result.data.data?.admin?.role===\"gestionnaire\"){\n          navigate(\"/dashboard/home\");\n       }\n \n"
                },
                {
                    "date": 1748450557650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n          if(result.data.data?.admin?.role===\"Admin\"){\n          navigate(\"/dashboard/home\");\n       }\n       if(result.data.data?.admin?.role===\"gestionnaire\"){\n-         navigate(\"/dashboard/home\");\n+         navigate(\"/dashboard/assures\");\n       }\n \n        if(result.data.data?.admin?.role===\"expert\"){\n          navigate(\"/dashboard/assures\");\n"
                }
            ],
            "date": 1748447568818,
            "name": "Commit-0",
            "content": "import {\n  Card,\n  Input,\n  Checkbox,\n  Button,\n  Typography,\n} from \"@material-tailwind/react\";\n\n\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authApi from \"../../api/auth\";\nimport useAuth from \"../../auth/useAuth\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().required().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\"),\n});\nexport function SignIn() {\n  const auth = useAuth();\n  const navigate = useNavigate();\n  const [loginFailed, setLoginFailed] = useState(false);\n  const [formData, setFormData] = useState({ email: \"\", password: \"\" });\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    // Effacer l'erreur quand l'utilisateur modifie le champ\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: \"\" }));\n    }\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoginFailed(false);\n    \n    try {\n      // Validation avec Yup\n      await validationSchema.validate(formData, { abortEarly: false });\n      \n      // Appel API identique à la version mobile\n      const result = await authApi.login(formData.email, formData.password);\n      console.log(\"Login result:\", result);\n\n      if (!result.ok || !result.data?.data?.token) {\n        console.error(\"Échec - Réponse API:\", result);\n        return setLoginFailed(true);\n      }\n     // console.log(\"result.data.data.token\",result.data.data.token)\n      // Connexion réussie - même logique que mobile\n       await auth.logIn(result.data.data.token);\n      if(result.data.data?.admin?.role===\"gestionnaire\"){\n         navigate(\"/dashboard/home\");\n      }\n\n       if(result.data.data?.admin?.role===\"expert\"){\n         navigate(\"/dashboard/assures\");\n      }\n      \n      \n       if(result.data.data?.admin?.role===\"grage\"){\n         navigate(\"/dashboard/message\");\n      }\n      // console.log(\"first\")\n      \n      \n      \n    } catch (validationErrors) {\n      // Gestion des erreurs de validation\n      const newErrors = {};\n      if (validationErrors.inner) {\n        validationErrors.inner.forEach(error => {\n          newErrors[error.path] = error.message;\n        });\n      }\n      setErrors(newErrors);\n    }\n  };\n  return (\n    <section className=\"m-8 flex gap-4\">\n      <div className=\"w-full lg:w-3/5 mt-24\">\n        <div className=\"text-center\">\n          <Typography variant=\"h2\" className=\"font-bold mb-4\">Sign In</Typography>\n          <Typography variant=\"paragraph\" color=\"blue-gray\" className=\"text-lg font-normal\">Enter your email and password to Sign In.</Typography>\n        </div>\n          {/* Message d'erreur global - mêmes classes que dans votre code */}\n          {loginFailed && (\n          <div className=\"text-red-500 text-center mb-4\">\n            Email ou mot de passe invalide.\n          </div>\n        )}\n        <form onSubmit={handleSubmit} className=\"mt-8 mb-2 mx-auto w-80 max-w-screen-lg lg:w-1/2\">\n          <div className=\"mb-1 flex flex-col gap-6\">\n            <Typography variant=\"small\" color=\"blue-gray\" className=\"-mb-3 font-medium\">\n              Your email\n            </Typography>\n            <Input\n              size=\"lg\"\n              placeholder=\"name@mail.com\"\n              name=\"email\"\n              className=\" !border-t-blue-gray-200 focus:!border-t-gray-900\"\n              labelProps={{\n                className: \"before:content-none after:content-none\",\n              }}\n              value={formData.email}\n              onChange={handleChange}\n            />\n             {errors.email && (\n              <span className='text-red-500 text-sm mt-1 block'>{errors.email}</span>\n            )}\n            <Typography variant=\"small\" color=\"blue-gray\" className=\"-mb-3 font-medium\">\n              Password\n            </Typography>\n            <Input\n              type=\"password\"\n              size=\"lg\"\n               name=\"password\"\n              placeholder=\"********\"\n              value={formData.password}\n              onChange={handleChange}\n              className=\" !border-t-blue-gray-200 focus:!border-t-gray-900\"\n              labelProps={{\n                className: \"before:content-none after:content-none\",\n              }}\n            />\n               {errors.password && (\n              <span className='text-red-500 text-sm mt-1 block'>{errors.password}</span>\n            )}\n          </div>\n        \n          <Button type=\"submit\" className=\"mt-6\" fullWidth>\n            Sign In\n          </Button>\n\n          <div className=\"flex items-center justify-between gap-2 mt-6\">\n            <Checkbox\n              label={\n                <Typography\n                  variant=\"small\"\n                  color=\"gray\"\n                  className=\"flex items-center justify-start font-medium\"\n                >\n                  Subscribe me to newsletter\n                </Typography>\n              }\n              containerProps={{ className: \"-ml-2.5\" }}\n            />\n            <Typography variant=\"small\" className=\"font-medium text-gray-900\">\n              <a href=\"#\">\n                Forgot Password\n              </a>\n            </Typography>\n          </div>\n       \n         \n        </form>\n\n      </div>\n      <div className=\"w-2/5 h-full hidden lg:block\">\n        <img\n          src=\"/img/pattern.png\"\n          className=\"h-full w-full object-cover rounded-3xl\"\n        />\n      </div>\n\n    </section>\n  );\n}\n\nexport default SignIn;\n"
        }
    ]
}